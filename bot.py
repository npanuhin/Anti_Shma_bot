from time import sleep
import logging
import re

from telethon import TelegramClient, events
import jstyleson as json


# Get your credentials on https://my.telegram.org/apps and place them in `settings.json`
with open("settings.json") as file:
    settings = json.load(file)


assert settings["api_id"] != -1 and settings["chat_id"] != -1, "You haven't entered your credentials in settings.json"


TIMEOUT_SHMA = settings["timeout_shma"]
TIMEOUT_PEOPLE = settings["timeout_people"]

CHAT_ID = settings["chat_id"]
SHMA_ID = settings["shma_id"]

client = TelegramClient("session", settings["api_id"], settings["api_hash"])

logging.basicConfig(
    filename="log.txt",
    format='%(asctime)s,%(msecs)d %(name)s %(levelname)s %(message)s',
    datefmt='%H:%M:%S',
    level=logging.INFO
)


# async def send_msg(msg: str):
#     message_entity = await client.send_message(entity=CHAT_ID, message=msg, silent=True)
#     print(f"Notify message [{message_entity.id}] send")
#     return message_entity


async def delete_msg(message_id):
    for _ in range(5):
        try:
            await client.delete_messages(entity=CHAT_ID, message_ids=[message_id])
            break
        except Exception as e:
            print(e)
            client.get_dialogs()
            sleep(3)


@client.on(events.NewMessage(chats=CHAT_ID))
async def my_event_handler(event):
    message_id = event.original_update.message.id
    message = event.original_update.message.message.lower()
    user_id = event.original_update.message.from_id.user_id

    if user_id == SHMA_ID:
        if any((
            re.match(r"üé£\s*\[–†—ã–±–∞–ª–∫–∞\]\s*üé£", message, re.IGNORECASE | re.DOTALL),
            re.match(r"üé£\s*\[–ë–∞—Ä –®–º—ã\]\s*üé£", message, re.IGNORECASE | re.DOTALL),
            message.startswith("–æ—Ç –≤–∞—à–µ–≥–æ –≤—Ä–∞–≥–∞ –¥–∞–≤–Ω–æ –Ω–µ –±—ã–ª–æ –≤–µ—Å—Ç–µ–π"),
            message.split('\n')[0].startswith("–Ω–∞–ø–∞–¥–∞—é—â–∏–π") and message.split('\n')[1].startswith("–∑–∞—â–∏—â–∞—é—â–∏–π—Å—è"),
            re.match(r"^.+–£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —Å–∏–ª –¥–ª—è —Å—Ä–∞–∂–µ–Ω–∏–π", message, re.IGNORECASE | re.DOTALL)
        )):
            notification = f"Deleting message from SHMALALA after {TIMEOUT_SHMA} seconds"
            print(notification)
            logging.info(notification)
            sleep(TIMEOUT_SHMA)
            await delete_msg(message_id)
    else:
        if any((
            message.startswith("@shmalala_bot"),
            message.startswith("—à–º–∞")
        )) and any((
            re.search(r"—Ä—ã–±–∞–ª–∫–∞", message, re.IGNORECASE | re.DOTALL),
            re.search(r"–ª–æ–≤–∏\s+—Ä—ã–±—É", message, re.IGNORECASE | re.DOTALL),
            re.search(r"–¥—É—ç–ª—å", message, re.IGNORECASE | re.DOTALL),
            re.search(r"—Ç–æ–ø\s+(–±–æ–≥–∞—á–µ–π|–±–æ–≥–∞—Ç—ã—Ö)", message, re.IGNORECASE | re.DOTALL),
            re.match(r"(–º—è—É|–≥–∞–≤)", message, re.IGNORECASE | re.DOTALL),
            re.search(r"–ø–æ–∫–∞–∂–∏\s+(—Å–æ–±–∞–∫—É|–∫–æ—Ç–∞|–∫–æ—à–∫—É)", message, re.IGNORECASE | re.DOTALL),
            re.search(r"–Ω–∞—á–∏–Ω–∞–µ–º\s+–ø–∏—Ç—å", message, re.IGNORECASE | re.DOTALL),
            re.search(r"–ø—å–µ–º\s+\w+", message, re.IGNORECASE | re.DOTALL)
        )):
            # username = (await event.get_sender()).username
            notification = f"Deleting message from {user_id} after {TIMEOUT_PEOPLE} seconds"
            print(notification)
            logging.info(notification)
            sleep(TIMEOUT_PEOPLE)
            await delete_msg(message_id)

client.start(phone=settings["phone"], password="fJZ2GtbqVdveaQuX")
print("Starting...")
client.run_until_disconnected()
